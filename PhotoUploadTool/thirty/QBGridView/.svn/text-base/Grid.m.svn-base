//
//  Grid.m
//  Gridview
//
//  Created by midhun on 09/07/10.
//  Copyright 2010 __MyCompanyName__. All rights reserved.
//
#import <QuartzCore/QuartzCore.h>
#import "SMConstantsView.h"
#import "Grid.h"

@implementation GridCell

@synthesize delegate	= _delegate;
@synthesize index		= _index;
@synthesize reuseGridIdentifier;
@synthesize cellButton = _cellButton;
@synthesize urlButton = _urlButton;
@synthesize cellLabel = _cellLabel;
@synthesize titleLabel = _titleLabel;
@synthesize dateLabel = _dateLabel;
@synthesize sizeLabel = _sizeLabel;
@synthesize fileTypeButton = _fileTypeButton;
@synthesize loadingIndicator = _loadingIndicator;
@synthesize cellShadowView = _cellShadowView;
@synthesize contentImageView = _contentImageView;

- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier {
    if ((self = [super initWithStyle:style reuseIdentifier:reuseIdentifier])) {
        // Initialization code
		
    }
	
    return self;
}

- (id)initWithStyle:(UITableViewCellStyle)style reuseGridIdentifier:(NSString *)reuseIdentifier {
    if ((self = [self initWithStyle:style reuseIdentifier:reuseIdentifier])) {
        // Initialization code
		self.reuseGridIdentifier = [[NSString alloc] initWithString:reuseIdentifier];
		
		_cellButton = [[UIButton alloc] initWithFrame:self.frame];
		_cellButton.frame = CGRectMake(0.0,0.0,202.0,242.0);
		_cellButton.titleLabel.numberOfLines = 2;
		_cellButton.titleLabel.lineBreakMode = UILineBreakModeWordWrap;
		_cellButton.titleLabel.textAlignment = UITextAlignmentCenter;
		[_cellButton addTarget:self action:@selector(cellDidSelected) forControlEvents:UIControlEventTouchDown];

		
		_fileTypeButton = [[UIButton alloc] initWithFrame:self.frame];
		_fileTypeButton.frame = CGRectMake(0.0,252.0,34.0,41.0);
		_fileTypeButton.titleLabel.adjustsFontSizeToFitWidth = YES;  
		_fileTypeButton.titleLabel.font = [UIFont boldSystemFontOfSize:12];
		_fileTypeButton.titleLabel.textColor = [UIColor blackColor]; 
		_fileTypeButton.contentEdgeInsets = (UIEdgeInsets){.top=19};
		
		
		_urlButton = [[UIButton alloc] initWithFrame:self.frame];
		_urlButton.frame = CGRectMake(45.0,252.0,170.0,40.0);
		[_urlButton addTarget:self action:@selector(urlSelected) forControlEvents:UIControlEventTouchDown];

		
		_cellShadowView = [[UIImageView alloc] initWithFrame:CGRectMake(-5.0, 205.0, 228.0,40.0)];
		_cellShadowView.image = [UIImage imageNamed:TILE_SHADOW_IMAGE];
 		
		_cellLabel = [[UILabel alloc]initWithFrame:self.frame];
		_cellLabel.frame = CGRectMake(45.0,252.0,170.0,40.0);
		_cellLabel.backgroundColor = [UIColor clearColor];
		_cellLabel.lineBreakMode = UILineBreakModeMiddleTruncation;
		_cellLabel.numberOfLines = 2;
		
		_titleLabel = [[UILabel alloc]initWithFrame:self.frame];
		_titleLabel.frame = CGRectMake(45.0,292.0,170.0,20.0);
		_titleLabel.backgroundColor = [UIColor clearColor];
		_titleLabel.lineBreakMode = UILineBreakModeMiddleTruncation;
		_titleLabel.numberOfLines = 1;
		
		_dateLabel = [[UILabel alloc]initWithFrame:self.frame];
		_dateLabel.frame = CGRectMake(45.0,312.0,170.0,20.0);
		_dateLabel.backgroundColor = [UIColor clearColor];
		_dateLabel.lineBreakMode = UILineBreakModeMiddleTruncation;
		_dateLabel.numberOfLines = 1;
		
		_sizeLabel = [[UILabel alloc]initWithFrame:self.frame];
		_sizeLabel.frame = CGRectMake(45.0,332.0,170.0,20.0);
		_sizeLabel.backgroundColor = [UIColor clearColor];
		_sizeLabel.lineBreakMode = UILineBreakModeMiddleTruncation;
		_sizeLabel.numberOfLines = 1;
		
		_loadingIndicator = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhiteLarge];
		_loadingIndicator.hidesWhenStopped = YES;
		CGRect loadingFrame = _loadingIndicator.frame;
		loadingFrame.origin.x += _cellButton.frame.origin.x + _cellButton.frame.size.width/2;
		loadingFrame.origin.y += _cellButton.frame.origin.y + _cellButton.frame.size.height/2;
		loadingFrame.origin.x -= loadingFrame.size.width/2;
		loadingFrame.origin.y -= loadingFrame.size.height/2;
		_loadingIndicator.frame = loadingFrame;
		
		self.selectionStyle = UITableViewCellSelectionStyleNone;
		
		[self addSubview:_cellShadowView];
		[self addSubview:_cellButton];
		[self addSubview:_cellLabel];
		[self addSubview:_urlButton];
		[self addSubview:_titleLabel];
		[self addSubview:_dateLabel];
		[self addSubview:_sizeLabel];
		[self addSubview:_fileTypeButton];
		[self addSubview:_loadingIndicator];
		
		_contentImageView =[[UIImageView alloc] initWithImage:[UIImage imageNamed:TILE_BLANK_IMAGE]];
		_contentImageView.center = self.cellButton.center;
		[self.cellButton addSubview:_contentImageView];
		
    }
	
    return self;
}

- (void)cellDidSelected {
	
	[self.delegate cellDidSelectedAtIndex:_index];
	//[self performSelector:@selector(checkTapCountAndTriggerEvent) withObject:nil afterDelay:0];
	
}


- (void)urlSelected {
	[self.delegate urlSelectedAtIndex:_index For:self];
}

- (void)setSelected:(BOOL)selected animated:(BOOL)animated {
	
    [super setSelected:selected animated:animated];
		
    // Configure the view for the selected state
}

- (void)didMoveToWindow {
	self.window ?
	[[GridCache sharedCache] removeReusableView:(UIView<ReusableView> *)self] :
	[[GridCache sharedCache] enqueueReusableView:(UIView<ReusableView> *)self];
}

- (void)dealloc {
    [super dealloc];
	[reuseGridIdentifier release];
	[_cellShadowView release];
	[_fileTypeButton release];
	[_urlButton release];
	[_cellButton release];
	[_dateLabel release];
	[_titleLabel release];
	[_cellLabel release];
	[_sizeLabel release];
	[_contentImageView release];
	
	
}


@end

@implementation Grid

@synthesize delegate = _delegate;
@synthesize cellWidth = _cellWidth;
@synthesize cellHeight = _cellHeight;
@synthesize minRows = _minRows;
@synthesize minCols = _minCols;
@synthesize scaleFactor = _scaleFactor;


- (id)initWithFrame:(CGRect)frame {
    if ((self = [super initWithFrame:frame])) {
        // Initialization code
		_scaleFactor = 1.0;
    }
    return self;
}

/*
// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
- (void)drawRect:(CGRect)rect {
    // Drawing code
}
*/

- (void)dealloc {
    [super dealloc];
}


- (CGPoint) pointInsideGridForIndex:(GridIndex)index {
	CGPoint point;
	
	point.x = ( (index.column + 1) * _horizontalSpacing ) + (index.column * _cellWidth);
	point.y = ( (index.row + 1) * _verticalSpacing ) + (index.row * _cellHeight);
	return point;
}

- (GridIndex) findMinimumGridIndexForSize:(CGSize)size withOffset:(CGPoint)offset {
	
	//Implemented for faster calculation
	GridIndex minimumIndex ;
	minimumIndex.row = 0;
	minimumIndex.column = 0;
	if(CGPointEqualToPoint(offset, CGPointZero))
		return minimumIndex;
	else {
		
		minimumIndex.row = offset.y/(_cellHeight+_verticalSpacing);
		minimumIndex.column = offset.x/(_cellWidth+_horizontalSpacing);
		
	}
	
	if (minimumIndex.row<0) {
		minimumIndex.row =0;
	}
	if (minimumIndex.column<0) {
		minimumIndex.column = 0;
	}
	return minimumIndex;
	
	
	
	
	
	//GridIndex minimumIndex;
//	
//	minimumIndex.row = 0;
//	minimumIndex.column = 0;
//	
//	BOOL foundIndex = NO;
//	
//	for (int row =0 ; row < _rows; row++) {
//		for (int col = 0 ; col < _cols; col++) {
//			
//			GridIndex currentIndex;
//			currentIndex.row = row;
//			currentIndex.column = col;
//			CGPoint point = [self pointInsideGridForIndex:currentIndex];
//									
//			if ((point.x+_cellWidth+(1200.0*_scaleFactor)) > offset.x) {
//				minimumIndex.column = col;				
//			}
//			
//			if ((point.y+_cellHeight+(1200.0*_scaleFactor)) > offset.y) {
//				minimumIndex.row = row;
//			}
//			if ((point.x+_cellWidth+(1200.0*_scaleFactor)) > offset.x  && (point.y+_cellHeight+(1200.0*_scaleFactor)) > offset.y) {
//				foundIndex = YES;
//				break;
//			} 
//			
//						
//		}
//		if (foundIndex) {
//			break;
//		}
//	}
//	
//	return minimumIndex;
}

- (GridIndex) findMaximumGridIndexForSize:(CGSize)size withOffset:(CGPoint)offset withMinimumIndex:(GridIndex)minimumIndex {
	

	
	//Implemented for faster calculation
	GridIndex maximumIndex;
	maximumIndex = minimumIndex;
	
	if(CGSizeEqualToSize(size,CGSizeZero))
		return maximumIndex;
	else {
		
		maximumIndex.row += (int)size.height/(_cellHeight+_verticalSpacing);
		maximumIndex.column += (int)size.width/(_cellWidth+_horizontalSpacing);
		
	}
	
	if (maximumIndex.row>_rows-1) {
		maximumIndex.row = _rows-1;
	}
	if (maximumIndex.column>_cols-1) {
		maximumIndex.column = _cols-1;
	}
	return maximumIndex;
	
	
	
	//BOOL foundIndex = NO;
//	
//	for (int row = minimumIndex.row ; row < _rows; row++) {
//		for (int col = minimumIndex.column ; col < _cols; col++) {
//			
//			GridIndex currentIndex;
//			currentIndex.row = row;
//			currentIndex.column = col;
//			CGPoint point = [self pointInsideGridForIndex:currentIndex];
//						
//			if ((point.x) < (offset.x+size.width + _horizontalSpacing +(1200.0*_scaleFactor))) {				
//				maximumIndex.column = col;
//			}
//			
//			if ((point.y) < (offset.y+size.height + _verticalSpacing+(1200.0*_scaleFactor))) {
//				maximumIndex.row = row;
//			}
//			
//			if ((point.x) >= (offset.x+size.width + _horizontalSpacing +(1200.0*_scaleFactor)) && (point.y) >= (offset.y+size.height + _verticalSpacing +(1200.0*_scaleFactor))) {
//				foundIndex = YES;				
//				break;
//			}			
//			
//		}
//		if (foundIndex) {
//			break;
//		}
//	}
//	
//	return maximumIndex;
}

- (void) removeCellWithMinimumIndex:(GridIndex)minimumIndex maximumIndex:(GridIndex)maximumIndex {
	
	for (GridCell * oldCell in self.subviews) {		
		if (oldCell.index.row < minimumIndex.row || oldCell.index.column < minimumIndex.column) {
			[oldCell removeFromSuperview];
//			[[GridCache sharedCache] enqueueReusableView:oldCell];
		} else if (oldCell.index.row > maximumIndex.row || oldCell.index.column > maximumIndex.column) {
			[oldCell removeFromSuperview];
//			[[GridCache sharedCache] enqueueReusableView:oldCell];
		} 	
	}
	
}


- (BOOL)findCellWithIndexInGrid:(GridIndex)index {
	
	BOOL cellFound = NO;
	
	for (GridCell * oldCell in self.subviews) {
		if (oldCell.index.row == index.row && oldCell.index.column == index.column) {
			cellFound = YES;
			break;
		}
	}
	
	return cellFound;
}

- (GridCell *)cellWithGridIndex:(GridIndex)index {
	
	GridCell * cell = nil;
	
	for (GridCell * oldCell in self.subviews) {
		if (oldCell.index.row == index.row && oldCell.index.column == index.column) {
			cell = oldCell;
			break;
		}
	}
	
	return cell;
}

//- (void)updateCellAtGridIndex:(GridIndex)index withImage:(UIImage *)cellImage {
//	
//	GridCell * oldCell = [self cellWithGridIndex:index];
//
//}
//- (void) updateCellAtGridIndex:(GridIndex)index withCell:(GridCell *)cell {
//	
//	GridCell * oldCell = [self cellWithGridIndex:index];
//	
//	if (oldCell!=nil) {
//		[oldCell removeFromSuperview];
//	}
//	
//	cell.index = index;
//	
//	[self addCellToGrid:cell atGridIndex:index];
//	
//	
//}

- (void) removeAllSubviews {
	
	for (GridCell * cell in self.subviews) {
		[cell removeFromSuperview];
		//[[GridCache sharedCache] enqueueReusableView:cell];
	}
}
- (void) loadContentForSize:(CGSize)size withOffset:(CGPoint)offset {
	
	_isLoading = YES;
	GridIndex minimumIndex = [self findMinimumGridIndexForSize:size withOffset:offset];
	GridIndex maximumIndex = [self findMaximumGridIndexForSize:size withOffset:offset withMinimumIndex:minimumIndex];
	
	if (abs(maximumIndex.row - minimumIndex.row) >= _rows-1) {
		
		if (2*size.height < ((_cellHeight+_verticalSpacing)*_rows-_cellHeight)) {
			return;
		}		
		
	}
	
	if (abs(maximumIndex.column - minimumIndex.column) >= _cols-1) {
		
		if (2*size.width < ((_cellWidth+_horizontalSpacing)*_cols-_cellWidth)) {
			return;
		}	
	}
	
	if (maximumIndex.row!=_rows-1) {
		maximumIndex.row +=1;
	}
	
	if (maximumIndex.column!=_cols-1) {
		maximumIndex.column +=1;
	}
	
	if (minimumIndex.row!=0) {
		minimumIndex.row -= 1;
	}
	
	if (minimumIndex.column!=0) {
		minimumIndex.column -= 1;
	}
	
	_minRows = maximumIndex.row-minimumIndex.row;
	_minCols = maximumIndex.column-minimumIndex.column;
	
	[self removeCellWithMinimumIndex:minimumIndex maximumIndex:maximumIndex];
	 
	for (int row = minimumIndex.row ; row <= maximumIndex.row; row++) {	
		for (int col = minimumIndex.column ; col <= maximumIndex.column; col++) {
			GridIndex index;
			index.row = row;
			index.column = col;
			if ([self findCellWithIndexInGrid:index] == NO) {
				
				GridCell * cell = [self.delegate  cellForGridAtGridIndex:index] ;
				
				if (cell!= nil) {
					cell.index = index;
					cell.delegate = self;
					[self addCellToGrid:[cell retain] atGridIndex:index];
					[cell release];
					
				}
			}
		}
	}
	
	_isLoading = NO;
	
}

- (void) reloadGridForSize:(CGSize)size withOffset:(CGPoint)offset{
	
	if (self.delegate==nil) {
		return;
	}
	
	_rows = [self.delegate numberOfRowsInGridView];
	_cols = [self.delegate numberOfColumnsInGridView];
	
	
	if ( _rows == 0 && _cols == 0 )
		return; 
	
	
	if ( [self.delegate respondsToSelector:@selector(horizontalSpacingForGrid)] ) 
		_horizontalSpacing = [self.delegate horizontalSpacingForGrid];
	
	if ( [self.delegate respondsToSelector:@selector(verticalSpacingForGrid)] )
		_verticalSpacing = [self.delegate verticalSpacingForGrid];
	
	
	if ( [self.delegate respondsToSelector:@selector(widthForCellInGridView)] )
		_cellWidth = [self.delegate widthForCellInGridView];
	
	if ( [self.delegate respondsToSelector:@selector(heightForCellInGridView)] )
		_cellHeight = [self.delegate heightForCellInGridView];
	
	
	if (_horizontalSpacing == 0) { // Default value
		_horizontalSpacing = 5;
	}
	
	if (_verticalSpacing == 0) { // Default value
		_verticalSpacing = 5;
	}
	
	if (_cellWidth == 0 ) {  // Default value
		_cellWidth = 100;
	}
	
	if (_cellHeight == 0) {  // Default value
		_cellHeight = 100;
	}
	
	
	
	//for (GridCell * oldCell in self.subviews)
//		[oldCell removeFromSuperview];
	
	// Defines the rectangle for the grid view : 0, 0, total-widht, total-height
	self.frame = CGRectMake(0.0,0.0,(_cols + 1) * _horizontalSpacing + ( _cols * _cellWidth ), (_rows + 1) * _verticalSpacing + ( _rows * _cellHeight ));
	
	//if (_isLoading==NO) {
		//CGRect loadingGridFrame = CGRectMake(offset.x, offset.y, size.width, size.height);
		//[self performSelectorInBackground:@selector(loadContent:) withObject:NSStringFromCGRect(loadingGridFrame)];
		[self loadContentForSize:size withOffset:offset];
	//}	
	
	
}

- (void)loadContent:(NSString *)frameString {
	NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];
	CGRect loadingGridFrame = CGRectFromString(frameString);
	
	CGPoint offset = loadingGridFrame.origin;
	CGSize size = loadingGridFrame.size;
	
	_isLoading = YES;
	GridIndex minimumIndex = [self findMinimumGridIndexForSize:size withOffset:offset];
	GridIndex maximumIndex = [self findMaximumGridIndexForSize:size withOffset:offset withMinimumIndex:minimumIndex];
	
	if (abs(maximumIndex.row - minimumIndex.row) >= _rows-1) {
		
		if (2*size.height < ((_cellHeight+_verticalSpacing)*_rows-_cellHeight)) {
			return;
		}		
		
	}
	
	if (abs(maximumIndex.column - minimumIndex.column) >= _cols-1) {
		
		if (2*size.width < ((_cellWidth+_horizontalSpacing)*_cols-_cellWidth)) {
			return;
		}	
	}
	
	if (maximumIndex.row!=_rows-1) {
		maximumIndex.row +=1;
	}
	
	if (maximumIndex.column!=_cols-1) {
		maximumIndex.column +=1;
	}
	
	if (minimumIndex.row!=0) {
		minimumIndex.row -= 1;
	}
	
	if (minimumIndex.column!=0) {
		minimumIndex.column -= 1;
	}
	
	_minRows = maximumIndex.row-minimumIndex.row;
	_minCols = maximumIndex.column-minimumIndex.column;
	[self performSelectorOnMainThread:@selector(removeCellsInMainThread:) withObject:[NSDictionary dictionaryWithObjectsAndKeys:[NSNumber numberWithInt:minimumIndex.row],@"min_row",[NSNumber numberWithInt:minimumIndex.column ],@"min_col",[NSNumber numberWithInt:maximumIndex.row],@"max_row",[NSNumber numberWithInt:maximumIndex.column ],@"max_col",nil] waitUntilDone:NO];
	//[self removeCellWithMinimumIndex:minimumIndex maximumIndex:maximumIndex];
	
	for (int row = minimumIndex.row ; row <= maximumIndex.row; row++) {	
		for (int col = minimumIndex.column ; col <= maximumIndex.column; col++) {
			GridIndex index;
			index.row = row;
			index.column = col;
			if ([self findCellWithIndexInGrid:index] == NO) {
				[self performSelectorOnMainThread:@selector(addCellToGridInMainThread:) withObject:[NSDictionary dictionaryWithObjectsAndKeys:[NSNumber numberWithInt:index.row],@"row",[NSNumber numberWithInt:index.column ],@"column",nil] waitUntilDone:NO];
				//GridCell * cell = [self.delegate  cellForGridAtGridIndex:index] ;
//				
//				if (cell!= nil) {
//					cell.index = index;
//					cell.delegate = self;
//					[self addCellToGrid:[cell retain] atGridIndex:index];
//					[cell release];
//					
//				}
			}
		}
	}
	
	_isLoading = NO;
	
	[pool release];
}

- (void) removeCellsInMainThread:(NSDictionary *)rangeDict {
	
	GridIndex minimumIndex, maximumIndex;
	minimumIndex.row = [[rangeDict objectForKey:@"min_row"] intValue];
	minimumIndex.column = [[rangeDict objectForKey:@"min_col"] intValue];
	maximumIndex.row = [[rangeDict objectForKey:@"max_row"] intValue];
	maximumIndex.column = [[rangeDict objectForKey:@"max_col"] intValue];
	
	[self removeCellWithMinimumIndex:minimumIndex maximumIndex:maximumIndex];
}

- (void) addCellToGridInMainThread:(NSDictionary *)gridIndexDict {
	
	GridIndex index;
	index.row = [[gridIndexDict objectForKey:@"row"] intValue];
	index.column = [[gridIndexDict objectForKey:@"column"] intValue];
	
	GridCell * cell = [self.delegate  cellForGridAtGridIndex:index] ;
	
	if (cell!= nil) {
		cell.index = index;
		cell.delegate = self;
		[self addCellToGrid:[cell retain] atGridIndex:index];
		[cell release];
		
	}
}

- (void) addCellToGrid:(GridCell *)cell atGridIndex:(GridIndex)index {
	
	CGRect cellFrame;
	
	cellFrame.origin.x = ( (index.column + 1) * _horizontalSpacing ) + (index.column * _cellWidth);
	cellFrame.origin.y = ( (index.row + 1) * _verticalSpacing ) + (index.row * _cellHeight);
	cellFrame.size.width = _cellWidth;
	cellFrame.size.height = _cellHeight;
	
	//CALayer * layer = [cell layer];
//	layer.masksToBounds = YES;
//	layer.cornerRadius = 10;
	
	[cell setFrame:cellFrame];
	//if ([cell superview]) {
		[self addSubview:cell];
	//}
	
}

#pragma mark GridCell delegate Functions

- (void)cellDidSelectedAtIndex:(GridIndex)index {
	if ( [self.delegate respondsToSelector:@selector(cellDidSelectedAtGridIndex:)] )
		[self.delegate cellDidSelectedAtGridIndex:index];
}

- (void)urlSelectedAtIndex:(GridIndex)index For:(GridCell*)cell {
	if ( [self.delegate respondsToSelector:@selector(urlDidSelectAtGridIndex: For:)] )
		[self.delegate urlDidSelectAtGridIndex:index For:cell];
}

@end


